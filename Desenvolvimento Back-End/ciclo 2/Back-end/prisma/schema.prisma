generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Comentado temporariamente, pois o SQLite não suporta enums, mas pode ser descomentado ao migrar para PostgreSQL
// enum role {
//   STUDENT
//   TEACHER
//   MANAGEMENT
//   ADMINISTRATIVE
//   ADMIN
// }

// Modelo para Voluntários
model TbVoluntario {
  id              Int     @id @default(autoincrement())
  nome            String
  sobrenome       String
  cpf             String  @unique

  // Relações com outros modelos
  enderecos       TbEndereco[]
  contatos        TbContato[]
  usuario         TbUsuario?
  ongsSeguidas    TbONG[] @relation("Seguidores")
  projetosInscritos TbProjeto[] @relation("Inscritos")

  hashimg     String

  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

// Modelo para ONGs
model TbONG {
  id           Int     @id @default(autoincrement())
  cnpj         String  @unique
  razaoSocial  String
  nomeFantasia String

  site         String?
  instagram   String?

  descricao    String?
  areasAtuacao String
  responsavel  String
  CPFResponsavel String

  hashimg     String  

  // Relações com outros modelos
  enderecos    TbEndereco[]
  contatos      TbContato[]
  usuario       TbUsuario?
  seguidores    TbVoluntario[] @relation("Seguidores")
  projetos      TbProjeto[]
  newsletters   TbNewsletter[]

  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

// Modelo para Usuários
model TbUsuario {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String  @unique
  password     String
  refreshToken String? @unique

  // Relações com outros modelos
  FkIdTbVoluntario Int? @unique
  TbVoluntario     TbVoluntario? @relation(fields: [FkIdTbVoluntario], references: [id])
  FkIdTbONG        Int? @unique
  TbONG            TbONG? @relation(fields: [FkIdTbONG], references: [id])

  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

// Modelo para Endereços
model TbEndereco {
  id Int @id @default(autoincrement())
  endereco String
  cep      String
  cidade   String
  estado   String
  numero  String
  complemento String?

  // Relações com outros modelos
  FkIdTbVoluntario Int?
  TbVoluntario     TbVoluntario? @relation(fields: [FkIdTbVoluntario], references: [id])
  FkIdTbONG        Int?
  TbONG            TbONG? @relation(fields: [FkIdTbONG], references: [id])

  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

// Modelo para Contatos
model TbContato {
  id       Int    @id @default(autoincrement())
  telefone String
  email    String @unique

  // Relações com outros modelos
  FkIdTbVoluntario Int?
  TbVoluntario     TbVoluntario? @relation(fields: [FkIdTbVoluntario], references: [id])
  FkIdTbONG        Int?
  TbONG            TbONG? @relation(fields: [FkIdTbONG], references: [id])

  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

// Modelo para Projetos
model TbProjeto {
  id          Int        @id @default(autoincrement())
  nome        String
  descricao   String
  data        DateTime
  hora        String
  local       String
  numerVagas  Int

  hashimg     String  

  // Relações com outros modelos
  FkIdTbONG   Int
  TbONG       TbONG      @relation(fields: [FkIdTbONG], references: [id])
  voluntarios TbVoluntario[] @relation("Inscritos")

  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

// Modelo para Newsletters
model TbNewsletter {
  id        Int     @id @default(autoincrement())
  titulo    String
  conteudo  String

  FkIdTbONG Int
  // Relações com outros modelos
  TbONG     TbONG   @relation(fields: [FkIdTbONG], references: [id])
  
  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

model teste {
  id Int @id @default(autoincrement())

  string String
  int Int

  // Campos de log para controle de histórico
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}